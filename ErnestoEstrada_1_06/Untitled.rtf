{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf460
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red170\green13\blue145;\red196\green26\blue22;
\red28\green0\blue207;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \CocoaLigature0 /*Calculate mileage reimbursement based on a table.\
  This program reads the input file, creates arrays, and  will calculate mileage \
  reimbursements using if/else/if statements. It will also keep track of the \
  positive numbers, numbers to process, and add the totals of the miles and \
  reimbursements. All of this information will be sent to view on the console \
  and will also be in a file that the program will create. 	\
  Ernesto Estrada\
  Program #8, CS 1050, Section 1\
  Eclipse 4.5.0, MacBook Pro OS X El Capitan\
  Endemic - Natural to or characteristic of a specific people or place; native; \
  	indigenous. Belonging exclusively or confined to a particular place. An \
  	endemic disease. \
  "The most important six inches on the battlefield is between your ears."\
  					- General James "Mad Dog" Mattis (b.1950)\
 */\cf0 \
\cf3 import\cf0  java.util.Scanner;\
\cf3 import\cf0  java.io.*;\
\
\cf3 public\cf0  \cf3 class\cf0  ErnestoEstrada_1_08 \{\
	\
	\cf3 static\cf0  toolKit tools = \cf3 new\cf0  toolKit(); \
	\cf3 static\cf0  \cf3 final\cf0  String CURRENCY_MASK = \cf4 "#,##0.00"\cf0 ;\
	\cf3 static\cf0  \cf3 final\cf0  String NUMBER_MASK = \cf4 "#,##0.0"\cf0 ;\
	\
	\cf3 public\cf0  \cf3 static\cf0  \cf3 void\cf0  programSum(PrintWriter outputFile) \{\
		String line = \cf4 "Calculates mileage reimbursement using arrays.\\n"\cf0 \
				+ \cf4 "Once it calculates the information it will print to screen\\n"\cf0 \
				+ \cf4 "and it will also write a file with the information"\cf0 ;\
		System.out.println(line);\
		outputFile.write(line);\
		outputFile.println();\
	\}\
\cf2 //*****************************************************************************	\cf0 \
	\cf3 public\cf0  \cf3 static\cf0  \cf3 void\cf0  heading(PrintWriter outputFile) \{\
		String line = (\cf4 "\\n Mileage  "\cf0  + \cf4 "  Reimbursement \\n"\cf0  +  \cf4 "________  "\cf0  \
	            + \cf4 "  _____________\\n"\cf0 );\
		System.out.print(line);\
		outputFile.print(line);\
		\
	\}\
\cf2 //*****************************************************************************		\cf0 \
	\cf3 public\cf0  \cf3 static\cf0  \cf3 int\cf0  readData(Scanner input, \cf3 double\cf0 [] values) \{\
		\cf3 int\cf0  nRead = \cf5 0\cf0 ;\
		\
		\cf3 while\cf0  (nRead < values.length && input.hasNext()) \{\
			values[nRead] = input.nextDouble();\
			nRead++;\
		\}	\
		\cf3 return\cf0  nRead;\
	\}\
\cf2 //*****************************************************************************		\cf0 \
	\cf3 public\cf0  \cf3 static\cf0  \cf3 void\cf0  calcReimbursement(\cf3 double\cf0 [] miles, \cf3 double\cf0  [] reimb, \cf3 int\cf0  nValue) \{	\
		\cf3 double\cf0  base = \cf5 0.0\cf0 ;\
		\cf3 double\cf0  rate = \cf5 0.0\cf0 ;\
		\cf3 double\cf0  overage = \cf5 0.0\cf0 ;\
	\
		\cf2 // Beginning of the reimbursement calculations \cf0 \
		\cf3 for\cf0  (\cf3 int\cf0  i = \cf5 0\cf0 ; i < nValue; i++)\{\
			\cf3 if\cf0  (i == nValue) \cf3 break\cf0 ;\
			\cf3 else\cf0  \cf3 if\cf0  (miles[i] <= \cf5 0\cf0 ) 	\
				\{base = \cf5 0.0\cf0 ; rate = \cf5 0.0\cf0 ; overage = \cf5 0.0\cf0 ;\}\
			\cf3 else\cf0  \cf3 if\cf0  (miles[i] < \cf5 400\cf0 ) 	\
				\{base = \cf5 0.0\cf0 ; rate = \cf5 .18\cf0 ; overage = miles[i];\}\
			\cf3 else\cf0  \cf3 if\cf0  (miles[i] < \cf5 900\cf0 ) 	\
				\{base = \cf5 65.0\cf0 ; rate = \cf5 .15\cf0 ; overage = miles[i] - \cf5 400\cf0 ;\}\
			\cf3 else\cf0  \cf3 if\cf0  (miles[i] < \cf5 1300\cf0 )   \
				\{base = \cf5 115.0\cf0 ; rate = \cf5 .12\cf0 ; overage = miles[i] - \cf5 900\cf0 ;\}\
			\cf3 else\cf0  \cf3 if\cf0  (miles[i] < \cf5 1900\cf0 )   \
				\{base = \cf5 140.0\cf0 ; rate = \cf5 .10\cf0 ; overage = miles[i] - \cf5 1300\cf0 ;\}\
			\cf3 else\cf0  \cf3 if\cf0  (miles[i] < \cf5 2600\cf0 )	\
				\{base = \cf5 165.0\cf0 ; rate = \cf5 .08\cf0 ; overage = miles[i] - \cf5 1900\cf0 ;\}\
			\cf3 else\cf0  						\
				\{base = \cf5 195.0\cf0 ; rate = \cf5 .06\cf0 ; overage = miles[i] - \cf5 2600\cf0 ;\}\
		reimb[i] = base + rate * overage;\
		\} \cf2 // End for\cf0 \
	\} \cf2 // End calcReimbursement\cf0 \
\cf2 //*****************************************************************************	\cf0 \
	\cf3 public\cf0  \cf3 static\cf0  \cf3 void\cf0  detailLines(PrintWriter outputFile, \cf3 double\cf0 [] miles, \
													\cf3 double\cf0 [] reimbursements) \{\
		String noMileage = \cf4 "*****"\cf0 ;\
		\
		\cf3 for\cf0  (\cf3 int\cf0  i = \cf5 0\cf0 ; i < miles.length; i++) \{\
			\cf3 if\cf0  (i == miles.length) \cf3 break\cf0 ;\
			\cf3 else\cf0  \cf3 if\cf0  (reimbursements[i] > \cf5 0\cf0 ) \{\
				String line1 = tools.leftPad(miles[i],  \cf5 8\cf0 , NUMBER_MASK)\
						+ tools.leftPad(reimbursements[i], \cf5 12\cf0 , CURRENCY_MASK);\
				System.out.println(line1);\
				outputFile.println(line1);\
			\}\
			\cf3 else\cf0  \{\
				String line2 = tools.leftPad(miles[i],  \cf5 8\cf0 , NUMBER_MASK)\
						+ tools.padString(noMileage, \cf5 12\cf0 , \cf4 " "\cf0 , \cf4 ""\cf0 );\
				System.out.println(line2);\
				outputFile.println(line2);\
			\}\
		\}\
	\}\
\cf2 //*****************************************************************************	\cf0 \
	\cf3 public\cf0  \cf3 static\cf0  \cf3 double\cf0 [] avCalc(\cf3 double\cf0 [] miles, \cf3 double\cf0 [] reimbursements, \cf3 int\cf0  nValue) \{\
		\cf3 double\cf0 [] avCalc = \cf3 new\cf0  \cf3 double\cf0 [\cf5 4\cf0 ];\
		\cf3 double\cf0  sumMiles = \cf5 0.0\cf0 ;\
		\cf3 double\cf0  averageMiles = \cf5 0.0\cf0 ;\
		\cf3 double\cf0  sumReimb = \cf5 0.0\cf0 ;\
		\cf3 double\cf0  averageReimb = \cf5 0.0\cf0 ;\
		\
		\cf2 // Begins calculating the averages \cf0 \
		\cf3 for\cf0  (\cf3 int\cf0  i = \cf5 0\cf0 ; i < nValue; i++) \{\
			sumMiles += miles[i];\
			sumReimb += reimbursements[i];		\
			\}\
		\cf3 if\cf0  (nValue > \cf5 0\cf0 ) \{\
			averageMiles = sumMiles / nValue;\
			averageReimb = sumReimb / nValue;\
		\}\
		\cf2 // sends results to array \cf0 \
		avCalc[\cf5 0\cf0 ] = sumMiles;			\
		avCalc[\cf5 1\cf0 ] = averageMiles;\
		avCalc[\cf5 2\cf0 ] = sumReimb;\
		avCalc[\cf5 3\cf0 ] =	averageReimb;	\
		\cf3 return\cf0  avCalc;\
	\} \
\cf2 //*****************************************************************************\cf0 \
	\cf3 public\cf0  \cf3 static\cf0  \cf3 int\cf0  positiveNum(\cf3 double\cf0 [] values, \cf3 int\cf0  nValue) \{\
		\cf3 int\cf0  pos = \cf5 0\cf0 ;	\cf2 // Local variable for positive numbers\cf0 \
		\
		\cf2 // begins to find all the positive miles in array\cf0 \
		\cf3 for\cf0  (\cf3 int\cf0  i = \cf5 0\cf0 ; i < nValue; i++) \{\
			\cf3 if\cf0  (i == nValue) \cf3 break\cf0 ;\
			\cf3 if\cf0  (values[i] > \cf5 0\cf0 ) \{\
				++pos;\
			\}\
		\}\
		\cf3 return\cf0  pos;\
	\}\
\cf2 //*****************************************************************************\cf0 \
	\cf3 public\cf0  \cf3 static\cf0  \cf3 void\cf0  outputSummary (PrintWriter outputFile, \cf3 int\cf0  nValues, \
			\cf3 int\cf0  posNumbers, \cf3 double\cf0 [] averages) \{ \
		\cf2 // Creating string to display end result message\cf0 \
		String finalLine = \cf4 "\\nThe total miles is "\cf0  + \
			tools.leftPad(averages[\cf5 0\cf0 ], \cf5 2\cf0 , CURRENCY_MASK) + \
			\cf4 "\\nThe total amount of reinumbermbursement is "\cf0  + \
			tools.leftPad(averages[\cf5 2\cf0 ], \cf5 2\cf0 , NUMBER_MASK) + \
			\cf4 "\\nThe number miles that were processed is "\cf0  +\
			nValues + \cf4 "\\nThe amount of miles that were greater than zero  "\cf0  + \
			posNumbers + \cf4 "\\nThe average miles travel is "\cf0  + \
			tools.leftPad(averages[\cf5 1\cf0 ], \cf5 2\cf0 , NUMBER_MASK) + \
			 \cf4 "\\nThe average reimbursement is "\cf0  + \
			tools.leftPad(averages[\cf5 3\cf0 ], \cf5 2\cf0 , CURRENCY_MASK);\
		\
		System.out.println(finalLine);\
		outputFile.println(finalLine);\
		\
	\}\
\cf2 //*****************************************************************************		\cf0 \
	\cf3 public\cf0  \cf3 static\cf0  \cf3 void\cf0  main(String[] args) \cf3 throws\cf0  IOException \{\
		\
		\cf3 final\cf0  String INPUT_FILE = \cf4 "ErnestoEstrada_1_08_Test.txt"\cf0 ;\
		\cf3 final\cf0  String OUTPUT_FILE = \cf4 "ErnestoEstrada_1_08_Output.txt"\cf0 ;\
		\
		\cf3 int\cf0  nValues = \cf5 0\cf0 ;			\cf2 // Amount of values in file \cf0 \
		\cf3 int\cf0  nRead = \cf5 0\cf0 ;				\cf2 // Value that will be processed\cf0 \
		\cf3 int\cf0  posNumbers = \cf5 0\cf0 ;			\cf2 // Amount of positive numbers from data\cf0 \
		\cf2 // List containing value of all the miles\cf0 \
		\cf3 double\cf0 [] miles = \cf3 new\cf0  \cf3 double\cf0 [nValues];\
		\cf2 // Values of all the miles reimbursement\cf0 \
		\cf3 double\cf0 [] reimbursements = \cf3 new\cf0  \cf3 double\cf0 [nValues];	\
		\cf2 // Averages of the miles and reimbursements\cf0 \
		\cf3 double\cf0 [] averages = \cf3 new\cf0  \cf3 double\cf0 [\cf5 4\cf0 ];			\
\
		\cf2 // Access the input/output files\cf0 \
	    File inputDataFile = \cf3 new\cf0  File(INPUT_FILE);\
	    Scanner inputFile  = \cf3 new\cf0  Scanner(inputDataFile);\
	    FileWriter outputDataFile = \cf3 new\cf0  FileWriter(OUTPUT_FILE);\
	    PrintWriter outputFile = \cf3 new\cf0  PrintWriter(outputDataFile);\
	    System.out.println(\cf4 "Reading  file "\cf0  + INPUT_FILE + \cf4 "\\r\\n"\cf0  +\
		                   \cf4 "Creating file "\cf0  + OUTPUT_FILE + \cf4 "\\n"\cf0 );\
	    \
	    \cf2 // Creates message to explain what the program does to the user\cf0 \
	    programSum(outputFile);\
	    \
	    \cf2 // Creates heading for console and output file\cf0 \
 	    heading(outputFile);\
 	    \
 	    \cf2 // Reading values that will be processed and creating an array with \cf0 \
 	    \cf2 // that length \cf0 \
 	    nValues = inputFile.nextInt();\
 	    \
 	    \cf2 // Reading the file and transferring data to the miles array\cf0 \
 	    nRead = readData(inputFile, miles);\
 	    \
 	    \cf2 // Sends miles array to a method that will calculate the reimbursements \cf0 \
 	    \cf2 // and will transfer the results to the reimbursements array\cf0 \
 	    calcReimbursement(miles, reimbursements, nRead);\
 	    \
 	    \cf2 // This method will read both the miles and reimbursement arrays and \cf0 \
 	    \cf2 // create a table the will sent to the console and will print \cf0 \
 	    \cf2 // information on a different file\cf0 \
 	    detailLines(outputFile, miles, reimbursements);\
 	    \
 	    \cf2 // Uses a method to count positive miles and assigning that result to \cf0 \
 	    \cf2 // to given variable \cf0 \
 	    posNumbers = positiveNum(miles, nRead);\
 	    \
 	    \cf2 // Method that will calculate totals and averages of miles and of \cf0 \
 	    \cf2 // reimbursements. Will store results in array\cf0 \
 	    averages = avCalc(miles, reimbursements, nRead);\
 	       \
 	    \cf2 // Organize and write the left over information to the console and file \cf0 \
 	    outputSummary (outputFile, nRead, posNumbers, averages);\
 	   \
 	    inputFile.close();\
        outputFile.close();  \
	\} \cf2 // End Main\cf0 \
\} \cf2 // End Class	}